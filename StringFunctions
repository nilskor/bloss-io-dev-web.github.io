#!/bin/bash

# Will exit script if we would use an uninitialised variable:
# either set -u or set -o nounset
set -o nounset

# Will exit script when a simple command (not a control structure) fails:
# either set -e or set -o errexit
set -o errexit

# This setting prevents errors in a pipeline from being masked.
set -o pipefail

#set -vx

# Useful string splitting behaviour occurs with IFS=$'\n\t'
# The default is to split on spaces, tabs and newlines $' \n\t'
IFS=$'\n\t'

# Set variables:
declare -ri  TRUE=0          # g - global scope; r - read-only; i - integer; x - exportable
declare -ri FALSE=1

declare RED='\033[1;31m'     # actually a light Red to be exact :)
declare GREEN='\033[0;32m'
declare NC='\033[0m'         # No Color

declare -a  theArgs=()          # a - indexed array
declare -a htmlLines=()


#----------------------------------------------------------
# Overridden Echo function - www.etalabs.net/sh_tricks.html
#----------------------------------------------------------
#
function echo()
{
    fmt=%s end=\\n IFS=" "

    while [ $# -gt 1 ]
    do
        case "$1" in

            [!-]*|-*[!ne]*) break ;;

            *ne*|*en*) fmt=%b end= ;;

            *n*) end= ;;

            *e*) fmt=%b ;;

        esac
        shift
    done

    printf "$fmt$end" "$*"
    setIFS
}

function usage()
(
    echo -e ""
    echo -e "usage goes here"
    echo -e "All Here Document, Here-doc or Heredoc style input must end with a plain 'EOF' eg. EOF"
    echo -e ""
)

function    setIFS(){ IFS=$'\n\t'; }
function  unsetIFS(){ IFS= ;       }

#----------------------------------------------------------
# Read Here-Docs either directly or forced with '-hd'
#----------------------------------------------------------
#
function readInput()                # bash
{
    setIFS
    while read -r line
    do
        if [[ $line == "EOF" ]]
        then
            break
        fi
        htmlLines+=($line$'\n')    # Push  # new-line is :   $'\n'
    done
}

function _CountBytes()              # bash wc gawk
{
    # <SIGNATURE>: (0)_CountBytes (1)_result (2)someString (3?)options
    # <RETURN>   : (0)<T>Integer
    # <OPTIONS>  : (0) -hd (1) --explain
    # <BACKEND>  : bash, wc, gawk
    # <TEMPLATE> : _CountBytes _theResult "someString"

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    local -i _ret_CountBytes=0      # arg1 - _result becomes _ret_CountBytes
    local stringToBeSearched=""

    # START: main part of the function
    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString

        # START - do the optionals
        if [[ ! -z ${3:-} ]] && [[ $(_sc Find '(--explain)' ${3:-}) -gt 0 ]]
        then
            echo -e ":: START EXPLANATION ::====================================================\n"
            od --width=16 -t x1z -v -Ad <<<"$stringToBeSearched"
            echo -e "\n:: END   EXPLANATION ::===================================================="
        fi
        # END doing the optionals
        
        #main logic
        _ret_CountBytes=$(wc --bytes <<< "${stringToBeSearched}")
        eval "$1=\${_ret_CountBytes}"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n ${GREEN}CountBytes${NC} inputFileName <or> \"some string\" <or> <<Here-document ending with EOF\n"
        echo -e " If the count of bytes seems off by 1, try using ${GREEN}--explain${NC} as the last parameter. \n"
        echo -e "\t eg.  CountBytes inputFileName --explain \n"
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_CountBytes _result --help"

    fi
    # END of help section
    
}

function _CountChars()              # bash wc gawk
{
    # <SIGNATURE>: (0)_CountChars (1)_result (2)someString (3?)options
    # <RETURN>   : (0)<T>Integer
    # <OPTIONS>  : (0) -hd (1) --explain
    # <BACKEND>  : bash, wc, gawk
    # <TEMPLATE> : _CountChars _theResult "someString"

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    local -i _ret_CountChars=0      # arg1 - _result becomes _ret_CountChars
    local stringToBeSearched=""

    # START: main part of the function
    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString
        
        # START - do the optionals
        if [[ ! -z ${3:-} ]] && [[ $(_sc Find '(--explain)' ${3:-}) -gt 0 ]]
        then
            echo -e ":: START EXPLANATION ::====================================================\n"
            od --width=16 -t x1z -v -Ad <<<"$stringToBeSearched"
            echo -e "\n:: END   EXPLANATION ::===================================================="
        fi
        # END doing the optionals

        #main logic

        _ret_CountChars=$(wc --chars <<< "${stringToBeSearched}")
        #_ret_CountChars=$(( _ret_CountChars - 1 ))
        eval "$1=\${_ret_CountChars}"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n CountChars inputFileName <or> \"some string\" <or> <<Here-document ending with EOF\n"
        echo -e " If the count of characters seems off by 1, try using --explain as the last parameter. \n"
        echo -e "\t eg.  CountChars inputFileName --explain \n"
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_CountChars _result --help"

    fi
    # END of help section
    
}

function _CountLines()              # bash wc gawk
{
    # <SIGNATURE>: (0)_CountLines (1)_result (2)someString
    # <RETURN>   : (0)<T>Integer
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash, wc, gawk
    # <TEMPLATE> : _CountLines _theResult "someString"

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    local -i _ret_CountLines=0      # arg1 - _result becomes _ret_CountLines
    local stringToBeSearched=""

    # START: main part of the function
    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString
        
        #main logic
        
        _ret_CountLines=$(wc --lines <<< "${stringToBeSearched}")
        eval "$1=\${_ret_CountLines}"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n CountLines inputFileName <or> \"some string\" <or> <<Here-document ending with EOF\n"
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_CountLines _result --help"

    fi
    # END of help section
    
}

function _CountWords()              # bash wc gawk
{
    # <SIGNATURE>: (0)_CountWords (1)_result (2)someString
    # <RETURN>   : (0)<T>Integer
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash, wc, gawk
    # <TEMPLATE> : _CountWords _theResult "someString"

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    local -i _ret_CountWords=0      # arg1 - _result becomes _ret_CountWords
    local stringToBeSearched=""

    # START: main part of the function
    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString
        
        #main logic
        
        _ret_CountWords=$(wc --words <<< "${stringToBeSearched}")
        eval "$1=\${_ret_CountWords}"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n CountWords inputFileName <or> \"some string\" <or> <<Here-document ending with EOF\n"
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_CountWords _result --help"

    fi
    # END of help section
    
}

function _Length()                  # bash wc gawk
{
    # <SIGNATURE>: (0)_Length (1)_result (2)someString
    # <RETURN>   : (0)<T>Integer
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash, wc, gawk
    # <TEMPLATE> : _Length _theResult "someString"

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    local -i _ret_StringLength=0      # arg1 - _result becomes _ret_StringLength
    local stringToBeSearched=""

    # START: main part of the function
    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString
        
        #main logic
        
        _ret_StringLength=${#stringToBeSearched}
        eval "$1=\${_ret_StringLength}"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n ${GREEN}Length${NC} inputFileName <or> \"some string\" <or> <<Here-document ending with EOF\n"
        echo -e " ${GREEN}Length${NC} will count what can be echoed to stdout (eg. ${GREEN}what's visible on screen${NC}). This"
        echo -e " means it will typically ${GREEN}ignore the trailing 'Line Feed'${NC} or 'new line' character that is"
        echo -e " often there. Conversely, the CountBytes / CountChars functions ${GREEN}DO${NC} count the 'LF' character."
        echo -e " Note: it is a function of Bash as the shell that removes the final trailing new line character.\n"
        echo -e " eg.  Length 'abcdefghijklmnopqrstuvwxyz' gives an answer of 26. \n"
        echo -e "      CountBytes   'abcdefghijklmnopqrstuvwxyz' gives an answer of 27. \n"
        echo -e "      CountChars   'abcdefghijklmnopqrstuvwxyz' gives an answer of 27. \n"

    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_Length _result --help"

    fi
    # END of help section
    
}

function _Find()                    # bash grep -P head         # alias InStr
{
    # <SIGNATURE>: (0)_Find (1)_result (2)searchPattern (3)someStringToSearch (4?)options
    # <RETURN>   : (0)<T>Integer or (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -s
    # <BACKEND>  : bash, grep -P, head
    # <TEMPLATE> : _Find _theResult "searchPattern" "someStringToSearch"

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local -i _ret_regexStringFind=0
    local -i result=0
    local stringToBeSearched=""
    local -i stringNotPosition=$FALSE

    # START: main part of the function
    if [[ $# -ge 3 ]] || [[ $# -eq 2 && ${#htmlLines[@]} -gt 0 ]]
    then
        
        # START - determine what the searched string will be
        if [[ $# -ge 3 ]] && [[ -f $3  ]]
        then
                stringToBeSearched="$(< $3)"
        
        elif [[ $# -ge 3 ]]
        then
                stringToBeSearched="${3} ${htmlLines[@]}"
        
        elif [[ $# -eq 2 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString

        # START - set the booleans for the optionals
        if [[ ! -z ${4:-} ]] && [[ $(_sc Find '([-][s]{1,}\b)' ${4:-}) -gt 0 ]]
        then
            stringNotPosition=$TRUE
        fi
        # END setting the booleans

        thePattern="$2"

        foundIt=`grep -P -i -o -m 1 "$thePattern" <<< "$stringToBeSearched" | head -n 1` || foundIt=""
    
        if [[ ${#foundIt} -gt 0 ]]
        then
            searchString="$foundIt"
            rest=${stringToBeSearched#*$searchString}
            result="$(( ${#stringToBeSearched} - ${#rest} - ${#searchString} +1 ))"
        else
            result=0
        fi

        if [[ $stringNotPosition -eq $FALSE ]]
        then
            printf -v _ret_regexStringFind %q $result
            eval "$1=\${_ret_regexStringFind}"
        else
            eval "$1=\${foundIt}"
        fi
    
    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n The command syntax is: Find searchPattern someStringToSearch \n"
        echo -e " POSIX Extended Regular Expressions are allowed in 'searchPattern'"
        echo -e " Find returns a number greater than 0 if successful."
        echo -e " Find assumes the first character occupies position #1\n"
        echo -e " If the switch '-s' is added as the last parameter, then the string is"
        echo -e " returned, rather than the position.\n"
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_Find _result --help"

    fi
    # END of help section

}

function _FindAll()                 # bash grep -P
{
    # <SIGNATURE>: (0)_FindAll (1)_resultArray (2)searchPattern (3)someStringToSearch
    # <RETURN>   : (0)<T>AADS - Associative Array Definition String; always named 'ArrayOfStrings'
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash, grep -P
    # <TEMPLATE> : _FindAll _theResult "searchPattern" "someStringToSearch"

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    local -A ArrayOfStrings=()

    # START: main part of the function
    if [[ $# -eq 3 ]] || [[ $# -eq 2 && ${#htmlLines[@]} -gt 0 ]]
    then
        
        # START - determine what the searched string will be
        if [[ $# -eq 3 ]] && [[ -f $3  ]]
        then
                stringToBeSearched="$(< "$3")"
        
        elif [[ $# -eq 3 ]]
        then
                stringToBeSearched="$3"
        
        elif [[ $# -eq 2 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString

        #main logic

        thePattern="$2"

        foundIt=`grep -P -i -o "$thePattern" <<< "$stringToBeSearched"` || foundIt=""
    
        if [[ ${#foundIt} -gt 0 ]]
        then

            foundIt=($foundIt)
            nextChunk="$stringToBeSearched"
            iPos=0
            iPrevPos=1
            iPrevLen=0
            for item in ${foundIt[@]}
            do
                #searchString="$item"
                #rest=${stringToBeSearched#*$searchString}
                #result="$(( ${#stringToBeSearched} - ${#rest} - ${#searchString} +1 ))"
                #ArrayOfStrings[$result]="$item"
                iPos=$(_sc Find "$item" "$nextChunk")
                iLen=$(_sc Len "$item")
                nextChunk=${nextChunk#*$item}
                #echo $iPos $iLen "$nextChunk"
                iCalc=$(( $iPos + $iPrevPos + $iPrevLen - 1 ))
                #echo $iCalc
                ArrayOfStrings[$iCalc]="$item"
                iPrevPos=$iCalc
                iPrevLen=$iLen
            done
        fi

        eval "$1=\$(declare -p ArrayOfStrings)"

    # END: of the main part
    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "\n The command syntax is: FindAll searchPattern someStringToSearch"
        echo -e " The return result is an Associative array eg. declare -A someVariable"
        echo -e " The return result creates a hard-coded variable name - 'ArrayOfStrings'."
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_FindAll _result --help"

    fi
    # END of help section

}

function _FindReplace()             # bash
{
    # <SIGNATURE>: (0)_FindReplace (1)_result (2)oldString/pattern (3)newString (4)someStringToSearch
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -a or -w or -aw
    # <BACKEND>  : bash
    # <TEMPLATE> : _FindReplace _theResult "oldString/pattern" "newString" "someStringToSearch"

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local _ret_findReplace=""
    local -i doAll=$FALSE
    local -i writeFile=$FALSE

    if [[ $# -ge 4 ]] || [[ $# -eq 3 && ${#htmlLines[@]} -gt 0 ]]
    then
        
        if [[ $# -ge 4 ]] && [[ -f $4  ]]
        then
                #stringToBeSearched="$(sed -rn 's/.*/&/p' $4)"
                stringToBeSearched="$(< $4)"
        
        elif [[ $# -ge 4 ]]
        then
                stringToBeSearched="$4"
        
        elif [[ $# -eq 3 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi

        if [[ ! -z ${5:-} ]] && [[ ${5:-} == "-a" ]]
        then
            doAll=$TRUE

        elif [[ ! -z ${5:-} ]] && [[ ${5:-} == "-w" ]] && [[ -f $4  ]]
        then
            writeFile=$TRUE

        elif [[ ! -z ${5:-} ]] && [[ ${5:-} == "-aw" ]] && [[ -f $4  ]]
        then
            doAll=$TRUE && writeFile=$TRUE
        fi

        thePattern="${2:-}"
        newString="${3:-}"

        if [[ $doAll == $FALSE ]]
        then
            #echo -e "$stringToBeSearched; $thePattern; $newString;"
            _ret_findReplace="${stringToBeSearched/${thePattern}/${newString}}"
        else
            _ret_findReplace="${stringToBeSearched//${thePattern}/${newString}}"
        fi

        if [[ $writeFile == $TRUE ]]
        then
            echo "$_ret_findReplace">$4
        fi

        eval "$1=\${_ret_findReplace}"


    elif [[ $# -eq 1 || $2 == "-?" || $2 == "--help" || $2 == "-h" ]]
    then
        echo -e " \n The command syntax is: FindReplace oldString newString someStringToSearch\n"
        echo -e " someStringToSearch may be: <someString> or <someFile> or <Here-document> or <Here-string>"
        echo -e " Giving more than 4 parameter means the extras will be ignored, except! :"
        echo -e " - if you provide -a on the end, then a 'Replace All' will occur."
        echo -e " - if you provide -w on the end and your searched string was a file, the file will be updated."
        echo -e " - or in combination, a -aw for 'Replace All' and write the update to file.\n"
        echo -e " If successful, the updated string will be returned.\n"
        echo -e " The oldString may be a pattern, but not regular expressions."
        echo -e " To use regular expressions, use regexFindReplace instead."
        echo -e " For Pattern Matching visit https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching \n"

    else
        echo -e "\n Error - missing arguments."
        eval "_FindReplace _result --help"
    fi

}

function _regexFindReplace()        # bash perl -pe  StringClass (grep -P)
{
    # <SIGNATURE>: (0)_regexFindReplace (1)_result (2)oldString/pattern (3)newString (4)someStringToSearch (5?)options
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -a or -w or -aw.
    # <BACKEND>  : bash, StringClass, perl -pe
    # <TEMPLATE> : _regexFindReplace _theResult "oldString/pattern" "newString" "someStringToSearch"

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local _ret_regexFindReplace=""
    local -i doAll=$FALSE
    local -i writeFile=$FALSE
    local stringToBeSearched=""

    if [[ $# -ge 4 ]] || [[ $# -eq 3 && ${#htmlLines[@]} -gt 0 ]]
    then
        
        # START - determine what the searched string will be
        if [[ $# -ge 4 ]] && [[ -f $4  ]]
        then
                #stringToBeSearched="$(sed -rn 's/.*/&/p' $4)"
                stringToBeSearched="$(< $4)"
        
        elif [[ $# -ge 4 ]]
        then
                stringToBeSearched="$4"
        
        elif [[ $# -eq 3 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString

        # START - set the booleans for the optionals
        if [[ ! -z ${5:-} ]] && [[ $(_sc Find '([-]w*[a]{1,}w*\b)' ${5:-}) -gt 0 ]]
        then
            doAll=$TRUE
        fi

        if [[ ! -z ${5:-} ]] && [[ $(_sc Find '([-]a*[w]{1,}a*\b)' ${5:-}) -gt 0 ]] && [[ -f $4  ]]
        then
            writeFile=$TRUE
        fi
        # END setting the booleans

        thePattern="${2:-}"
        newString="${3:-}"

        if [[ $doAll == $FALSE ]]
        then
            _ret_regexFindReplace=`perl -pe s/"$thePattern"/"$newString"/ <<< "$stringToBeSearched"` || _ret_regexFindReplace=""  # once
        else
            _ret_regexFindReplace=`perl -pe s/"$thePattern"/"$newString"/g <<< "$stringToBeSearched"` || _ret_regexFindReplace=""  # all
        fi

        if [[ $writeFile == $TRUE ]]
        then
            echo "$_ret_regexFindReplace">$4
        fi

        eval "$1=\${_ret_regexFindReplace}"

    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then
        echo -e " \n The command syntax is: FindReplace oldString newString someStringToSearch\n"
        echo -e " someStringToSearch may be: <someString> or <someFile> or <Here-document> or <Here-string>"
        echo -e " Giving more than 4 parameter means the extras will be ignored, except! :"
        echo -e " - if you provide -a on the end, then a 'Replace All' will occur."
        echo -e " - if you provide -w on the end and your searched string was a file, the file will be updated."
        echo -e " - or in combination, a -aw for 'Replace All' and write the update to file.\n"
        echo -e " If successful, the updated string will be returned.\n"
        echo -e " regexFindReplace is PCRE compliant with its regular expressions. \n"

    else
        echo -e "\n Error - missing arguments."
        eval "_regexFindReplace _result --help"
    fi
    # END of help section

}

function _SubString()               # bash                      # alias Mid
{
    # <SIGNATURE>: (0)_SubString (1)_result (2)someStringToSearch (3)offset (4)length
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -nl
    # <BACKEND>  : bash
    # <TEMPLATE> : _SubString _theResult "someStringToSearch" offset length

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local _ret_subString=0
    local -i noLength=$FALSE

    if [[ $# -ge 4 ]] || [[ $# -eq 3 && ${#htmlLines[@]} -gt 0 ]]
    then

        if [[ $# -eq 3 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        
        elif [[ $# -ge 4 ]] && [[ -f ${2:-}  ]]
        then
                stringToBeSearched="$(< ${2:-})"
        
        elif [[ $# -ge 4 ]]
        then
                stringToBeSearched="${2:-}"
        
        fi

        if [[ $# -eq 4 ]] && [[ ${4:-} == "-nl" ]]
        then
            noLength=$TRUE
        fi

        local -i theOffset=${3:-1}
        local theLength="${4:-}"

        theOffset="$(( theOffset - 1 ))"

        if [[ $noLength == $FALSE ]]
        then
            _ret_subString="${stringToBeSearched:${theOffset}:${theLength}}"
        else
            _ret_subString="${stringToBeSearched:${theOffset}}"
        fi

        eval "$1=\${_ret_subString}"

    elif [[ $# -eq 1 || ${2:-} == "-?" || ${2:-} == "--help" || ${2:-} == "-h" ]]
    then
        echo -e "\n Extract and return a SubString from within a larger piece of text or file. \n"
        echo -e " ${GREEN}SubString someStringToSearch   offset length${NC}"
        echo -e " ${GREEN}SubString someFileToSearch.txt offset length${NC}\n"
        echo -e " offset & length need to be whole +/- numbers eg. integers"
        echo -e " offset means: the position X number characters from the start of 'someStringToSearch'. \n"
        echo -e " It's ok to substitute '-nl' as a length to indicate 'no length', in which case,"
        echo -e " the rest of 'someStringToSearch' is returned, starting from offset. \n"
        echo -e " ${GREEN}SubString FreddoFrogIsYummyChocolate 12 5    will return 'Yummy'"
        echo -e " SubString FreddoFrogIsYummyChocolate 12 -nl  will return 'YummyChocolate'"
        echo -e " SubString FreddoFrogIsYummyChocolate 12 -4   will return 'YummyChoco'${NC} \n"
        echo -e " A negative length means: come from the back of 'someStringToSearch', unlike"
        echo -e " a positive length, which means come forward from the offset position. \n"
        echo -e " See https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion \n" 
        echo -e " Giving more than 3 parameter means the extras will be ignored. \n"
        echo -e " -hd and Heredocs/Herestrings are valid as input eg. :\n"
        echo -e " -   ${GREEN}SubString -hd 346 -7${NC}  or  ${GREEN}SubString 421 5 -hd${NC}  or  "
        echo -e " -   ${GREEN}SubString 76 2 <<EOF${NC}  or  ${GREEN}SubString 88 12 <<<someString${NC} \n"

    else
        echo -e "\n ${RED}Error - missing arguments.${NC}"
        eval "_SubString _result --help"
    fi
 
}

function _Trim()                    # bash
{
    # <SIGNATURE>: (0)_Trim (1)_result (2)someStringToTrim
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash
    # <TEMPLATE> : _Trim _theResult "someStringToTrimBothFrontAndBack"

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local var="$2"
    #local _ret_trim

    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    
    printf -v _ret_trim '%s' "$var"
    eval "$1=\${_ret_trim}"

}

function _LTrim()                   # bash
{
    # <SIGNATURE>: (0)_Ltrim (1)_result (2)someStringToTrim
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local var="$2"
    #local _ret_trim

    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    
    printf -v _ret_trim '%s' "$var"
    eval "$1=\${_ret_trim}"

}

function _RTrim()                   # bash
{
    # <SIGNATURE>: (0)_Rtrim (1)_result (2)someStringToTrim
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd
    # <BACKEND>  : bash

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local var="$2"
    local _ret_trim

    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    
    printf -v _ret_trim '%s' "$var"
    eval "$1=\${_ret_trim}"

}

function _wsTrim()                  # StringClass (perl -pe)
{
    # <SIGNATURE>: (0)_wsTrim (1)_result (2)someString (3?)
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -s
    # <BACKEND>  : StringClass

    # small pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done

    # main part of the function

    local _ret_wsTrim=""
    local _duplicateWSPattern='\s{2,}'            # these are single quoted,
    local _fullStops='\b\s+[.]'                  # to stop bash from interpreting
    local -i doSingle=$FALSE

    if [[ $# -ge 2 ]] || [[ $# -eq 1 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 2 ]] && [[ -f $2  ]]
        then
                stringToBeSearched="$(< $2)"
        
        elif [[ $# -ge 2 ]]
        then
                stringToBeSearched="$2"
        
        elif [[ $# -eq 1 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString

        # START - set the booleans for the optionals
        if [[ ! -z ${3:-} ]] && [[ $(_sc Find '([-][s]{1,}\b)' ${3:-}) -gt 0 || $(_sc Find '([-][f]{1,}\b)' ${3:-}) -gt 0 ]]
        then
            doSingle=$TRUE
        fi
        # END setting the booleans

        _ret_wsTrim="$stringToBeSearched"

        if [[ $doSingle == $FALSE ]]
        then
            _regexFindReplace _ret_Temp   "$_duplicateWSPattern" ' ' "$stringToBeSearched" "-a"  # all
            _regexFindReplace _ret_wsTrim  $_fullStops           '.' "$_ret_Temp"       "-a"  # all

        else
            _regexFindReplace _ret_wsTrim "$_duplicateWSPattern" " " "$stringToBeSearched"       # first/single
        fi        
    
        eval "$1=\${_ret_wsTrim}"


    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then
        echo -e " \n The command syntax is: wsTrim someString\n"
        echo -e " someString may be: <someString> or <someFile> or <Here-document> or <Here-string>"
        echo -e " The default behaviour is to replace all occurrences."
        echo -e " Giving more than 2 parameter means the extras will be ignored, except! :"
        echo -e " - if you provide -s on the end, then only the first matching instance will occur."
        echo -e " If successful, the updated string will be returned.\n"
        echo -e " wsTrim is PCRE compliant with its regular expressions. \n"

    else
        echo -e "\n Error - missing arguments."
        eval "_wsTrim _result --help"
    fi
    # END of help section


}


#--------------------------------------------------------
# The Strings pseudo-class of string functions
#--------------------------------------------------------
#
StringClass()
(
    showUsage()
    (
        declare APIs=""
        echo -e "\n The following is a list of all the functions available in this script module.\n"
        
        APIs="$(declare -F)"
        APIs="${APIs//declare -f/.\/StringFunctions}"
        
        for apiName in "${APIs[@]}"
        do
            echo "$apiName"
        done
        echo -e "\n All Here Document, Here-doc or Heredoc style input must end with a plain 'EOF' eg. EOF"
        echo -e " Heredoc style input can be forced with the '-hd' switch as a parameter, terminated with EOF\n"
        echo -e " Functions with leading _underscores are the true APIs. They can be called directly from"
        echo -e " other scripts when 'sourced'. Note! the APIs expect to be passed a variable that will"
        echo -e " become the return result. The APIs do NOT echo their output.\n"
        echo -e " Conversely, the corresponding function names without leading _underscores can be called"
        echo -e " from the command-line and will echo their output.\n"
        echo -e " StringClass is the main function and has shorter pseudonyms for brevity, and they are:"
        echo -e " \tSC sc _SC _sc \n"
        echo -e " This is really only relevant when embedding one function call inside another eg.\n"
        echo -e '     source ./StringFunctions'
        echo -e '     declare chocolate="Caramel Koala"'
        echo -e '     StringClass Length "$chocolate"'
        echo -e '     SC SubString "$chocolate" 1 $(( $(_sc Len "$chocolate") - 2 ))"'
        echo -e "\n This example prints:\n\n \t13 \n \tCaramel Koa" 
        echo -e "\n Note: StringFunctions counts collections starting at 1, not 0. If you have a string of"
        echo -e " characters > 0, then position 1 is occupied by the first character."
        echo ""

    ) >&2
    
    isValidArg()
    (
        test "$(type -t "$1")" = "function"
    )

    CountBytes()
    (
        local _result
        _CountBytes _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    CountChars()
    (
        local _result
        _CountChars _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    CountLines()
    (
        local _result
        _CountLines _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    CountWords()
    (
        local _result
        _CountWords _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    Length()
    (
        local _result
        _Length _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    Len() # Pseudonym / Alias for Length
    (
        local _result
        _Length _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    Find()
    (
        local _result
        _Find _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    InStr() # Pseudonym / Alias for Find
    (
        local _result
        _Find _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    FindAll()
    (
        local -A _resultArray=()
        _FindAll _resultArray "$@"
        [ ! -z "${_resultArray:-()}" ] && echo -e "${#_resultArray[@]} AADS. ${_resultArray}"
    )

    FindReplace()
    (
        local _result
        _FindReplace _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    regexFindReplace()
    (
        local _result
        _regexFindReplace _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    SubString()
    (
        local _result
        _SubString _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    Mid() # Pseudonym / Alias for SubString
    (
        local _result
        _SubString _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    Trim()
    (
        local _result
        _Trim _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    LTrim()
    (
        local _result
        _LTrim _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    RTrim()
    (
        local _result
        _RTrim _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    wsTrim()
    (
        local _result
        _wsTrim _result "$@"
        [ ! -z "${_result:-}" ] && echo -e "$_result"
    )

    #isNumber(){ printf %f "$1" &>/dev/null && echo "true" || echo "false" }
    #isArray() { declare -p test1 2>/dev/null | grep -q '^declare \-[aA]' && echo "test1 is an array type" || echo "test1 is not an array type" }

    #--------------------------------
    # Parameter check for StringClass
    #--------------------------------
    #
    if [[ $# -gt 0 ]]
    then

        if isValidArg $@
        then
            "$@"
        else
            showUsage
        fi

    else
        showUsage
    fi
)

#--------------------------------------------------------
# Pseudonyms / Aliases for StringClass
#--------------------------------------------------------
#
SC()(StringClass "$@")
sc()(StringClass "$@")
_SC()(StringClass "$@")
_sc()(StringClass "$@")

#--------------------------------------------------------
# Process the "real" command line that called this script
#--------------------------------------------------------
#
if [[ -t 0 ]]      # input comes only from the string on the command line - no redirection.
then

    if [[ $# -gt 0 ]]
    then

        if [[ ${1:0:1} == "-" ]] && [[ ${1:1:1} =~ [[:graph:]] ]]
        then
            StringClass showUsage
            exit
        fi

        theArgs=("$@")

        for arg in "${theArgs[@]}"
        do
            if [[ $arg == "-hd" ]]
            then
                readInput # read more input into the htmlLines array
            fi
        done

    fi

else               # input comes from redirection.

    theArgs=("$@")
    readInput  # read more input into the htmlLines array

fi

#----------------------------------------------------------
# Then, send all known command line data into StringClass()
#----------------------------------------------------------
#
if [[ ${#theArgs[@]} -gt 0 ]]
then

    StringClass "${theArgs[@]}"

fi

#----------------------------------------------------------
# Function Template for 4 args with an optional 5th
#----------------------------------------------------------
function FunctionTemplate()
{
    # <SIGNATURE>: (0)_regexFindReplace (1)_result (2)oldString/pattern (3)newString (4)someStringToSearch (5?)options
    # <RETURN>   : (0)<T>String
    # <OPTIONS>  : (0) -hd (1) -a or -w or -aw.
    # <BACKEND>  : bash, StringClass, perl -pe

    # START: pre-processor to remove '-hd' from the argument list.
    local -i n=0
    for arg in $@
    do
        let "n+=1"
        if [[ $arg == "-hd" ]]
        then
            set -- "${@:1:n-1}" "${@:n+1}" # remove n'th positional argument - stackoverflow.com/a/23656370
        fi
    done
    # END

    #declare local variables

    # START: main part of the function
    if [[ $# -ge 4 ]] || [[ $# -eq 3 && ${#htmlLines[@]} -gt 0 ]]
    then

        # START - determine what the searched string will be
        if [[ $# -ge 4 ]] && [[ -f $4  ]]
        then
                stringToBeSearched="$(< $4)"
        
        elif [[ $# -ge 4 ]]
        then
                stringToBeSearched="$4"
        
        elif [[ $# -eq 3 ]] && [[ ${#htmlLines[@]} -gt 0 ]]
        then
                stringToBeSearched="${htmlLines[@]}"
        fi
        # END of searchedString
        
        # START - set the booleans for the optionals
        if [[ ! -z ${5:-} ]] && [[ $(_sc Find '([-][a]{1,}\b)' ${5:-}) -gt 0 ]]
        then
            doAll=$TRUE
        fi
        # END setting the booleans
        
        #main logic
        eval "$1=\${_ret_ThisFunctionName}"
    
    # END: of the main part

    # START - echo out the Help section
    elif [[ $# -eq 1 || "${2:-}" == "-?" || "${2:-}" == "--help" || "${2:-}" == "-h" ]]
    then

        echo -e "Main help section for this function."
        
    else

        local _result
        echo -e "\n Error - missing arguments."
        eval "_ThisFunctionName _result --help"

    fi
    # END of help section

}