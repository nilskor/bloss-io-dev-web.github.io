
/** NOTICE:
 *
 * Do NOT pollute or cross-contaminate styles between components on the page.
 *
 * Better to have all attributes / properties belonging to an element / component
 * in one place than scattered or mixed-in or intertwined.
 *
 * The 'display' property cannot be animated.
 *
 */

/** GLOBALS -------------------------------------------------------------------------------------------------
 *
 *  Use the root object to park any global variables. 
 */
/** Reminder: The 'display' property cannot be animated. */

:root
{
      background-color   : rgba(255, 255, 255, 1.0);       /* WebIDE: only used for layout guidance      */
    --navBarHeight       : 50px;
    --navBarPanelTimeout : 400ms;
    --navBarBgColor      : rgba(0,0,0,1);
    --navBarTextColor    : rgba(255,255,255,1);
    --navBarPanelBgColor : lightgrey;
    --subNavbarHeight    : 100px;
    --viewportFactor     : 45vh;
    --heroImage          : url("/assets/choc-van-yum.jpg");
    --footerHeight       : 60px;
    --theme-font         : 'Noto Sans', sans-serif;
}

*
{
    /*border          : 1px dashed lightgrey;          /* WebIDE: only used for showing invisibles ¶ */
    /*background-color: rgba(135, 206, 255, 0.65);     /* WebIDE: only used for layout guidance      */
    font-family: var(--theme-font);
}

/** FrameWork Policy------------ START ---------------
 *
 * Refer to: https://jsfiddle.net/hcarleton/1jh1cybc/10/ 
 *
 * the following code allows setting an element that is 'positioned: absolute'
 * to use the 'width: 100%' to be equal to the body width.
 *
 * MDN Note: It is often useful to set box-sizing to border-box to layout elements.
 * This makes dealing with the sizes of elements much easier, and generally 
 * eliminates a number of pitfalls you can stumble on while laying out your content.

 * On the other hand, when using position: relative or position: absolute, use of 
 * box-sizing: content-box allows the positioning values to be relative to the
 * content, and independent of changes to border and padding sizes, which is
 * sometimes desirable.
 */
*, *::before, *::after
{
    box-sizing: inherit;
    position: relative;
}
html
{
    box-sizing: border-box;
}
/** FrameWork Policy------------  END  --------------- */


/** LAYERS --------------------------------------------------------------------------------------------------
 *
 * All the layers are here: z-indexes
 * Component information is allowed and likely to be here.
 */

.aNavBar          { z-index: 9; } /** Component Navigation Bar or NavBar - it has the most right of way.      */
.navbarChildPanel { z-index: 8; } /** Component PanelSlider                                                   */
.grandchildPanel  { z-index: 7; } /** Component PanelSlider                                                   */
.doParallax       { z-index: 5; } /** Parallax effect applied to elements or components                       */


/** PAGE LAYOUT FRAMEWORK ----------------------------------------------------------------------------------- */
/** Component information is NOT allowed here. */

body
{
    margin: 0px;
    height: 2200px;                                     /* ONLY for Testing */
}
body
{
    /*background-color : rgba(255, 255, 230, 1);     /* WebIDE: this color only for layout guidance  */
    /*filter           : blur( 3px );                /* WebIDE: for demonstration only               */
}

.displayNone { display: none; }

/* headers */
h1                        { font-size: 4em; }
h3 > a[href^="#"]         { color: blue;    text-decoration: none; }
h3 > a[href^="#"]:visited { color: #551A8B; text-decoration: none; }
h3 > a[href^="#"]:hover   { text-decoration: underline; }


.gridContainer
{
    display : grid;
    /*gap     : 5px;                                 /* WebIDE: this gap only for layout guidance     */
    /*padding : 5px;                                 /* WebIDE: this padding only for layout guidance */
}
.gridContainer *
{
    /*text-align       : center;                   /* WebIDE: this alignment only for layout guidance  */
    /*background-color : white;                    /* WebIDE: this color only for layout guidance      */ 
}

.gridContainer.slicedAs_3c111        { grid-template-columns: 1fr 1fr 1fr;             }
.gridContainer.slicedAs_3c131        { grid-template-columns: 1fr 3fr 1fr;             }
.gridContainer.slicedAs_3c151        { grid-template-columns: 1fr 5fr 1fr;             }
.gridContainer.slicedAs_4c1111       { grid-template-columns: 1fr 1fr 1fr 1fr;         }
.gridContainer.slicedAs_5c11111      { grid-template-columns: 1fr 1fr 1fr 1fr 1fr;     }
.gridContainer.slicedAs_5c21111      { grid-template-columns: 2fr 1fr 1fr 1fr 1fr;     }
.gridContainer.slicedAs_6c111111     { grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; }

.gridContainer.slicedAs_3c111x3r111   { grid-template-columns: 1fr 1fr 1fr; 
                                        grid-template-rows   : 1fr 1fr 1fr;     }
.gridContainer.slicedAs_3c141x3r181   { grid-template-columns: 1fr 4fr 1fr; 
                                        grid-template-rows   : 1fr 8fr 1fr;     }
.gridContainer.slicedAs_3c141x3r11001 { grid-template-columns: 1fr 4fr 1fr; 
                                        grid-template-rows   : 1fr 100fr 1fr;   }
.gridContainer.slicedAs_4c1111x3r111  { grid-template-columns: 1fr 1fr 1fr 1fr; 
                                        grid-template-rows   : 1fr 1fr 1fr;     }
.gridContainer.slicedAs_3c131x3r1453  { grid-template-columns: 1fr 3fr 1fr; 
                                        grid-template-rows   : 1fr 45fr 3fr;    }
.gridContainer.slicedAs_3c131x3r1453  { grid-template-columns: 1fr 3fr 1fr; 
                                        grid-template-rows   : 1fr 45fr 3fr;    }


/* flexbox layout container           */
.flexbox    { display: flex;           }
/* textbox type - grid or flex        */
.g-textBox  { display: grid;           }
.f-textBox  { display: flex;           }
/* grid/flex top-to-bottom            */
.middle     { align-items: center;     }
.top        { align-items: flex-start; }
.bottom     { align-items: flex-end;   }
.child      { height: 100%;            } /* use this when the textBox is inside a parent <div> etc. */
/* grid-only left-to-right            */
.gCenter    { text-align: center;      }
.gLeft      { text-align: left;        }
.gRight     { text-align: right;       }
/* flex-only left-to-right            */
.fCenter    { justify-content: center; }
.fLeft      { justify-content: left;   }
.fRight     { justify-content: right;  }
.fSpaceAround { justify-content: space-around; }


/** COMPONENTS ======================================================================================================================================
  * @description
  * Like Angular, this framework here attempts to separate
  * out the components from one another, such that maintenance
  * becomes 'easier'.
  */
/** Reminder: The 'display' property cannot be animated. */


/** Common styling for some components. This is NOT
 *  recommended as it breaks the Framework Policy guidelines.
 *
 *  eg. Components and all of their functionality and styling shall be separated.
 */
.aNavBar       > button,
#subNavigation > button,
#gtk3-doco     > button
{
    width  : 100%;
    cursor : pointer;
    border : none;
}
#subNavigation > div,
#gtk3-doco     > div
{
    /* flex_jc_SA_ai_C */
    display: flex; justify-content: space-around; align-items: center;
}
.aNavBar       > a,
#subNavigation > a,
#gtk3-doco     > a
{
    text-align      : center;
    text-decoration : none;
    border          : none;
    outline         : none;
}


/** Component Navigation Bar or NavBar ===================================
 * Stuck to the top of the page by virtue of the
 * 'position: sticky'. Has the highest z-index,
 * making sure it stays on top.
 */
/** A Container with only one unique instance */
 .aNavBar
{
    position: sticky;
    top    : 0px;
    height : var(--navBarHeight);
    margin-top: 0px;
}
.aNavBar *
{
    background-color : var( --navBarBgColor   );
    color            : var( --navBarTextColor );
}
.aNavBar > a
{
    height          : var(--navBarHeight);
    line-height     : var(--navBarHeight);
    font            : 15px/var(--navBarHeight) var(--theme-font);
}


/** Component NavbarChildPanel Slider ====================================
 * 
 * @method panelSlider
 * @description
 * This method has a simple task of toggling a class on and off,     
 * onto or from the given (passed in) element (thisElementID).      
 * Additionally, it checks any peers for the same attributes and    
 * will first "turn them off" before toggling this current element.  
 * Requirements:                                                         
 * An element with class="navbarChildPanel" assigned to it.          
 * Two CSS classes that control the behaviour, namely:               
 * - navbarChildPanel
 * - panelShowing                                                    
 * 
 * The overall effect is a sliding set of panels, whereby only one   
 * is showing at any point in time.
 * @param {String} thisElementID 
 */
/** A Container with multiple instances */
.navbarChildPanel
{
    position  : fixed;
    top       : -135px;
    height    : var( --subNavbarHeight );
    width     : var( --navBarWidth );
    transition: var( --navBarPanelTimeout ) ease-in-out;
}
.navbarChildPanel *
{
    /*background-color: var( --navBarPanelBgColor ); /* */
}
.panelShowing
{
    top: var( --navBarHeight );
}


/** subNavigation, an instance of NavbarChildPanel Slider ================
 * 
 * Used to hold any sub-menus under the navigation bar
 */
/** An instance of the Slider menu container */
#subNavigation *
{
    background-color : var( --navBarPanelBgColor ); /* */
    border           : 1px dashed grey;     /* WebIDE: only used for showing invisibles ¶    */
}
#subNavigation > a
{
    height          : calc( var(--subNavbarHeight) / 2 );
    line-height     : calc( var(--subNavbarHeight) / 2 );
    font            : 15px/calc( var(--subNavbarHeight) / 2 ) var(--theme-font);
}
/** grid-area key/value pairs
 * where gaSN is: grid-area Sub-Navigation
 */
.gaSN_top    { grid-area: snTitle; }
.gaSN_col1   { grid-area: col1;    }
.gaSN_col2   { grid-area: col2;    }
.gaSN_col3   { grid-area: col3;    }
.gaSN_col4   { grid-area: col4;    }
.gridContainer.slicedAs_SubNav
{
    grid-template-columns: 1fr 1fr 1fr 1fr; 
    grid-template-rows   : 1fr 1fr;
    grid-template-areas  :
        'snTitle snTitle snTitle snTitle'
         'col1    col2    col3    col4';
}


/** Component GrandChildPanel Slider =====================================
 * 
 * @method panelSlider
 * @description
 * This method has a simple task of toggling a class on and off,     
 * onto or from the given (passed in) element (thisElementID).      
 * Additionally, it checks any peers for the same attributes and    
 * will first "turn them off" before toggling this current element.  
 * Requirements:                                                         
 * An element with class="grandchildPanel" assigned to it.          
 * Two CSS classes that control the behaviour, namely:               
 * - grandchildPanel
 * - grandchildPanelShowing                                                    
 * 
 * The overall effect is a sliding set of panels, whereby only one   
 * is showing at any point in time.
 * @param {String} thisElementID 
 */
/** A Container with multiple instances */
.grandchildPanel
{
     position  : fixed;
     top       : -135px;
     height    : var( --subNavbarHeight );
     width     : var( --navBarWidth );
     transition: var( --navBarPanelTimeout ) ease-in-out;
}
.grandchildPanelShowing
{
     top: calc( var( --navBarHeight ) + var( --subNavbarHeight ) );
}
/** gtk3-doco, an instance of GrandChildPanel Slider =====================
 * 
 * Used to hold the menus for gtk3 documentation
 */
/** An instance of the Slider menu container */
#GTK3 *,
#GDK *
{
    background-color : var( --navBarPanelBgColor ); /* */
    border           : 1px dashed grey;     /* WebIDE: only used for showing invisibles ¶    */
}
#GTK3 > a,
#GDK  > a
{
    height          : var(--subNavbarHeight);
    line-height     : var(--subNavbarHeight);
    font            : 15px/var(--subNavbarHeight) var(--theme-font);
}

.doco *
{
    border     : 1px dashed grey;     /* WebIDE: only used for showing invisibles ¶    */
    text-align : justify;
}
.doco h1
{
    text-align: left;
}

/** The main splash content =====================
 * the so-called Hero image or text
 */
.heroImage
{
    left    : 0px;
    width   : 100%;    /* see StaticAncestor code above */
}
.heroImage *
{
    border  : 1px dashed grey;     /* WebIDE: only used for showing invisibles ¶    */
}
/** grid-area key/value pairs
 * where gaHI is: grid-area Hero Image
 */
.gaHI_top    { grid-area: header; }
.gaHI_left   { grid-area: left;   }
.gaHI_middle { grid-area: image;  }
.gaHI_right  { grid-area: right;  }
.gaHI_bottom { grid-area: footer; }

.gridContainer.slicedAs_HeroImage
{
    grid-template-columns: 1fr 48fr 1fr;
    grid-template-rows   : calc( 10 * ( var(--viewportFactor) / 45 ) ) var(--viewportFactor) var(--viewportFactor);
    grid-gap: 10px;
    grid-template-areas:
        'header header header'
        'left   image  right'
        'footer footer footer';
}
#heroImage
{
    background-image: var( --heroImage );
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}


/** The "text-box" for the main content =========
 */
.injectHere
{
    color: black;
    /* flex_jc_SA_ai_FS */
    display: flex; justify-content: space-around; align-items: flex-start;    
}
.injectorPageWrap
{
    min-height: 100%;
    margin-bottom: calc( 0 - var( --footerHeight ) ); 
}
.injectorPageWrap:after
{
    content: none;
    display: block;
}


/** The footer ==================================
 */
.footer, .injectorPageWrap:after
{
    height: var( --footerHeight ); 
}
.footer
{
    background: lightgrey;
}
.footer > div,
.footer > div > a
{
    padding-left : 20px;
    height       : var(--footerHeight);
    line-height  : var(--footerHeight);
    font         : 15px/var(--footerHeight) var(--theme-font);
    color        : black;
}


/** Table of Contents ===========================
 */
.toc-container
{
    background: #f0f1f1 none repeat scroll 0 0;
    border: 1px solid #aaa;
    display: table;
    font-size: 95%;
    margin-bottom: 1em;
    margin: auto;
    padding: 20px;
    padding-top: 0px;
    padding-bottom: 15px;
    position: relative;
    top: 30px;
    margin-left: 0vw;
}

.toc-title 
{
    font-weight: 700;
    text-align: left;
}

.toc-container li,
.toc-container ul,
.toc-container ul li 
{
    list-style: none;
    padding-left: 0px;
}

.toc-secondary ul,
.toc-secondary li,
.toc-secondary ul li 
{
    text-indent: 20px;
}

.toc
{
    cursor: pointer;
    font-size: 12px;
}

/* toc tablet portability */ 
@media only screen and (min-width: 768px) and (max-width: 1024px)
{
    [class*="toc-container"]
    {
        position: relative;
        margin-left: 13vw;
    }
    [class*="generic-box-toc"]
    {
        padding-right: 2vw;
    }
}

/* toc phone portability mid */ 
@media only screen and (min-width: 500px) and (max-width: 735px) 
{
    [class*="toc-container"]
    {
        position: relative;
        margin-left: 10vw;
    }
    [class*="generic-box-toc"]
    {
        font-size: 2.15vw;
        padding-left: 10vw;
        padding-right: 10vw;
    }
    [class*="generic-box-toct"]
    {
        font-size: 2.5vw;
        padding-left: 10vw;
        padding-right: 10vw;
    }
}

/* toc phone portability min */ 
@media only screen and (max-width: 500px) 
{
    [class*="toc-container"]
    {
        position: static;
    }
    [class*="generic-box-toc"]
    {
        text-align: center;
        font-size: 3vw;
        padding-left: 2vw;
        padding-right: 2vw;
    }
    [class*="generic-box-toct"]
    {
        font-size: 4vw;
        padding-left: 2vw;
        padding-right: 2vw;
        padding-bottom: 2vw;
    }
}








/** Reference material - CSS Selectors -----------------------------------------------------------------------------------------------------------------
 *
 *  Copyright 1999-2020 by Refsnes Data (www.w3schools.com)
 *  Page from https://www.w3schools.com/cssref/css_selectors.asp
 *
 *  Selector 	            Example 	Example description
 *  ----------------------------------------------------------------------------------------------------------------------------------------------------
 *
 *  .class 	                .intro 	                Selects all elements with class="intro"
 *  .class1.class2 	        .name1.name2 	        Selects all elements with both name1 and name2 set within its class attribute
 *  .class1 .class2 	    .name1 .name2 	        Selects all elements with name2 that is a descendant of an element with name1
 *  #id 	                #firstname 	            Selects the element with id="firstname"
 *  * 	                    * 	                    Selects all elements
 *  element 	            p 	                    Selects all <p> elements
 *  element.class 	        p.intro 	            Selects all <p> elements with class="intro"
 *  element,element 	    div, p 	                Selects all <div> elements and all <p> elements
 *  element element 	    div p 	                Selects all <p> elements inside <div> elements
 *  element>element 	    div > p 	            Selects all <p> elements where the parent is a <div> element
 *  element+element 	    div + p 	            Selects all <p> elements that are placed immediately after <div> elements
 *  element1~element2 	    p ~ ul 	                Selects every <ul> element that are preceded by a <p> element
 *  [attribute] 	        [target] 	            Selects all elements with a target attribute
 *  [attribute=value] 	    [target=_blank] 	    Selects all elements with target="_blank"
 *  [attribute~=value] 	    [title~=flower] 	    Selects all elements with a title attribute containing the word "flower"
 *  [attribute|=value] 	    [lang|=en] 	            Selects all elements with a lang attribute value starting with "en"
 *  [attribute^=value] 	    a[href^="https"] 	    Selects every <a> element whose href attribute value begins with "https"
 *  [attribute$=value] 	    a[href$=".pdf"] 	    Selects every <a> element whose href attribute value ends with ".pdf"
 *  [attribute*=value] 	    a[href*="w3schools"] 	Selects every <a> element whose href attribute value contains the substring "w3schools"
 *  :active 	            a:active 	            Selects the active link
 *  ::after 	            p::after 	            Insert something after the content of each <p> element
 *  ::before 	            p::before 	            Insert something before the content of each <p> element
 *  :checked 	            input:checked 	        Selects every checked <input> element
 *  :default 	            input:default 	        Selects the default <input> element
 *  :disabled 	            input:disabled 	        Selects every disabled <input> element
 *  :empty 	                p:empty 	            Selects every <p> element that has no children (including text nodes)
 *  :enabled 	            input:enabled 	        Selects every enabled <input> element
 *  :first-child 	        p:first-child 	        Selects every <p> element that is the first child of its parent
 *  ::first-letter 	        p::first-letter 	    Selects the first letter of every <p> element
 *  ::first-line 	        p::first-line 	        Selects the first line of every <p> element
 *  :first-of-type 	        p:first-of-type 	    Selects every <p> element that is the first <p> element of its parent
 *  :focus 	                input:focus 	        Selects the input element which has focus
 *  :hover 	                a:hover 	            Selects links on mouse over
 *  :in-range 	            input:in-range 	        Selects input elements with a value within a specified range
 *  :indeterminate 	        input:indeterminate 	Selects input elements that are in an indeterminate state
 *  :invalid 	            input:invalid 	        Selects all input elements with an invalid value
 *  :lang(language) 	    p:lang(it) 	            Selects every <p> element with a lang attribute equal to "it" (Italian)
 *  :last-child 	        p:last-child 	        Selects every <p> element that is the last child of its parent
 *  :last-of-type 	        p:last-of-type 	        Selects every <p> element that is the last <p> element of its parent
 *  :link 	                a:link 	                Selects all unvisited links
 *  :not(selector) 	        :not(p) 	            Selects every element that is not a <p> element
 *  :nth-child(n) 	        p:nth-child(2) 	        Selects every <p> element that is the second child of its parent
 *  :nth-last-child(n)      p:nth-last-child(2) 	Selects every <p> element that is the second child of its parent, counting from the last child
 *  :nth-last-of-type(n) 	p:nth-last-of-type(2) 	Selects every <p> element that is the second <p> element of its parent, counting from the last child
 *  :nth-of-type(n) 	    p:nth-of-type(2) 	    Selects every <p> element that is the second <p> element of its parent
 *  :only-of-type 	        p:only-of-type 	        Selects every <p> element that is the only <p> element of its parent
 *  :only-child 	        p:only-child 	        Selects every <p> element that is the only child of its parent
 *  :optional 	            input:optional 	        Selects input elements with no "required" attribute
 *  :out-of-range 	        input:out-of-range 	    Selects input elements with a value outside a specified range
 *  ::placeholder 	        input::placeholder 	    Selects input elements with the "placeholder" attribute specified
 *  :read-only 	            input:read-only 	    Selects input elements with the "readonly" attribute specified
 *  :read-write 	        input:read-write 	    Selects input elements with the "readonly" attribute NOT specified
 *  :required 	            input:required 	        Selects input elements with the "required" attribute specified
 *  :root 	                :root 	                Selects the document's root element
 *  ::selection 	        ::selection 	        Selects the portion of an element that is selected by a user
 *  :target 	            #news:target 	        Selects the current active #news element (clicked on a URL containing that anchor name)
 *  :valid 	                input:valid 	        Selects all input elements with a valid value
 *  :visited 	            a:visited 	            Selects all visited links
 *
 */
